@using Entities
@using Business
@inject B_Product bProduct
@inject B_Category bCategory

<hr />
<select class="form-control" @onchange="CategoryChange">
    <option value="">Seleccione categoría...</option>
    @foreach (var category in categories)
    {
        <option value=@category.CategoryId>@category.CategoryName</option>
    }
</select>
<hr />

<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Referencia</th>
            <th>Nombre producto</th>
            <th>Categoría</th>
            <th>Cantidad</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts)
        {
            <tr>
                <td>@product.ProductId</td>
                <td>@product.ProductName</td>
                <td>@product.CategoryId</td>
                <td>@product.TotalQuantity</td>
                <td><a href="product/update/@product.ProductId">Editar</a></td>
            </tr>
        }
    </tbody>
</table>
@message
@code {
    List<ProductEntity> products = new List<ProductEntity>();
    List<ProductEntity> tempProducts = new List<ProductEntity>();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    string message;

    protected override async Task OnInitializedAsync()
    {
        products = bProduct.ProductList();
        tempProducts = products;
        categories = bCategory.CategoryList();
    }
    private void CategoryChange(ChangeEventArgs e)
    {
        tempProducts = products.Where(p => p.CategoryId == e.Value.ToString())
            .ToList();
    }
}
